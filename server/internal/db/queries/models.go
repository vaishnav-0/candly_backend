// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PoolType string

const (
	PoolType1m PoolType = "1m"
	PoolType5m PoolType = "5m"
)

func (e *PoolType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PoolType(s)
	case string:
		*e = PoolType(s)
	default:
		return fmt.Errorf("unsupported scan type for PoolType: %T", src)
	}
	return nil
}

type NullPoolType struct {
	PoolType PoolType
	Valid    bool // Valid is true if PoolType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPoolType) Scan(value interface{}) error {
	if value == nil {
		ns.PoolType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PoolType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPoolType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PoolType), nil
}

type Bet struct {
	ID     int64
	UserID pgtype.Text
	PoolID pgtype.Text
	Amount pgtype.Int4
	Won    pgtype.Bool
}

type BetStat struct {
	PoolID    string
	Total     pgtype.Int4
	Red       pgtype.Int4
	Green     pgtype.Int4
	TotalBets pgtype.Int4
	RedBets   pgtype.Int4
	GreenBets pgtype.Int4
}

type Pool struct {
	ID         string
	OpenTime   pgtype.Int8
	CloseTime  pgtype.Int8
	OpenPrice  pgtype.Numeric
	ClosePrice pgtype.Numeric
	Completed  pgtype.Bool
	Type       PoolType
}

type User struct {
	ID    int64
	Phone string
	Email pgtype.Text
	Name  pgtype.Text
}
